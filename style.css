@font-face {                            /* custom font */
    font-family: 'CustomFont_Caveat';
    src: url('Caveat/Caveat-VariableFont_wght.ttf'); 
                /* ! forward slash */
}


/*ToDo  Spent an extra lot of time organising .PiecesBoard (+children) components to get the desired visual adaptive behaviour                 */
/*ToDo  I wanted the '.Large' '.Medium' '.Small' boxes when selected to always only be as large/wide as the items inside (so the border when outlined is accurate)   */
/*ToDo       whilst using those objects to reference and shrink, shrinking children to better represent the size of the pieces they correlate to        */
/*ToDo  Organizing the hierarchy like this, I thought referencing (e.g., .Large) would be a simple way to control the size of the elements              */
/*ToDo  Turns out I couldnt scale it whilst asking it to match the childrens width, had to scale the children instead (in this case the <p>)            */

/*ToDo  Added vertical view scaling            */
/*ToDo  Won't do checking who wins, as I don’t think that’s difficult/worth-time. I will move on to another project          */


/*?   consider reading in browser Inspect   */



/*! ------ Main Structure MockUp ------ */

body{  
    /* height: 100%; */
    /* width: 60vmin; */


    background-color: beige;

    /* display: flex; */
    /* flex-direction: column; */
    /* justify-content: center; */

    font-family: CustomFont_Caveat;

    display: inline;
    text-align: center;
}
body .MainBodyLayout{
    justify-self: center;
}

.MainBodyLayout{
    margin: 4vmin;
    display: flex;
    gap: 4%;
    /* grid-template: 60vmin / 30vmin 40vmin 30vmin; */
    align-items: flex-start;
    justify-items: center;

    /* height: 100%; */
    /* width: 100%; */

    /* justify-content: center; */
    /* justify-items: stretch; */

    /* width: 100vmin; */
    /* height: 100vmin; */
}

#tealSide > div{    /* invert 2nd players layout*/
    flex-direction: row;
    justify-self: start;
}

p{
    margin: 0em;
    padding: 0em;
    border: 0em;
}


.Table{
    /* margin: 1em; */
    display: grid;
    grid-template: 1fr 1fr 1fr / 1fr 1fr 1fr ;
    background-color: rgb(226, 226, 203);
    gap: 5px;
}
.Table p{
    padding: 2vmin;
    background-color: beige;
}



/* small turn text */
.SideSide_Turn{
    display: flex;
    justify-content: center;
    font-size: 3vmin;
}
.SideSide_Turn h4{
    margin: .3%;
}

/** little gradient for starting text */
#TurnTag2{
    background: linear-gradient(to right, orange, teal); /* Orange to teal gradient */
    -webkit-background-clip: text;  /* Safari/Chrome */
    background-clip: text;
    color: transparent;             /* Hides the actual text color to show the gradient */
    width: 13%;
}






/*! ------ interacting ------ */

/** Hovering */
.Table p {
    cursor: pointer;
    border: 1px solid #33333300;
    transition: border-color 0.1s;
}
.Table p:hover {
    border-color:  #ddd;
}
.Table p:active {
    border-color: #bbb;
}


.PiecesBoard > div {
    cursor: pointer;
    border: 2px solid #33333300;
    transition: border-color 0.1s;
    /* display: flex;
    align-items: center;
    align-self: center; */
}
.PiecesBoard > div:hover {
    border-color:  #ddd;
}
.PiecesBoard > div:active {
    border-color: #bbb;
}



/** Make non clickable for Consistency */
.PiecesBoard img, .PiecesBoard p, .Table img  {
    /* (unclickable) */
    pointer-events: none;
}



/* ! ---- Cups ---- */
img{
    margin: 0;
    padding: 0;
    border: 0;
    display: inline-block;
    align-self: center;
    justify-self: center;
    
}
.CupLarge, .CupMedium, .CupSmall {
    margin: 0;
    padding: 0;

    /* display: flex; */
    /*? align-self: center; */
    /* justify-self: center; */
}


/*!   PiecesBoard   */
.PiecesBoard{

    margin-top: 4vmin;

    display: flex;
    /* grid-template-rows: auto auto auto; */
    flex-direction: column;
    width: 30vmin;
    align-items: end;
    justify-items: end;
    /* height: auto; */
    /* width: fit-content; */
}
#tealSide{
    align-items: start;     /* Invert */
}

.Large, .Medium, .Small{
    margin-top: 4px;
    display: inline-flex;
    
    flex-direction: row-reverse;
    /* flex-shrink: var(1vmin); */
    width: fit-content;
    /* justify-items: center; */

    /* height: fit-content; */
    /* width: fit-content; */
    
    /* width: 80%; */
    /* height: 5vmin; */
    /* width: fit-content; */

}

/**  Scale Cups  */
.Large p{
    height: 10vmin;
}
.Medium p{
    height: 6vmin;
}
.Small p{
    height: 3vmin;
}


/* ? ( eg   CupLarge    ) */
.PiecesBoard > div > p{
    padding: 0%;
    margin: 0;
    display: inline-flex;
    /* width: 100%; */
    /* height: 100%; */
    /* height: 5%; */
    /* width: auto; */
    flex-shrink: 1;

    margin: 0;
    padding: 0.2vmin;
    border: 0;
}

.PiecesBoard > div > p > img{
    display: inline;
    /* flex-grow: 1; */
    /* object-fit: contain;     */
    /* ? keeps aspect ratio */

    height: 100%;
    width: 100%;
    /* font-size: 100%; */

    margin: 0;
    padding: 0;
    border: 0;
}



/*!  Main Table Board  */
.Table,
.Table p,
.Table p img{
    /* width: 70%; */
    /* height: auto; */
    
    margin: 0%;
    border: 0%;
    /* padding: 0%; */
}
.Table p{
    width: 16vmin;
    height: 16vmin;

    display: flex;
    justify-content: center;
}



/** Fix Vertical Screen scaling */
@media (max-aspect-ratio: 1/.84){
    .Table p{
        width: 9.5vmin;
        height: 9.5vmin;
    }
}
@media (max-aspect-ratio: 1/1.4){   /** Might as well do Super Vertical */
    .MainBodyLayout{
        /* background-color: brown; */
        flex-wrap: wrap;
        justify-content: center;

        margin-top: 6vmin;
        
    }
    .Table{
        order: -1;
        margin-bottom: 6vmin;
    }
    .Table p{
        width: 16vmin;
        height: 16vmin;
    }
}



/**  Scale Tables Cups  */
.Table > .CupLarge img{
    width: 80%;

    /** Small height adjustment for emersion */
    position: relative;
    top: -16%;
}
.Table > .CupMedium img{
    width: 55%;

    position: relative;
    top: -7%;
}
.Table > .CupSmall img{
    width: 30%;
}





/*!  Other Bits  */
.Invis{
    display: none;
}











/* .Large img{
    padding: 1vmin;
    width: 8vmin;
}
.Medium img{
    padding: 1.2vmin;
    width: 6vmin;
}
.Small img{
    padding: 1.24vmin;
    width: 4vmin;
} */





/* .CupMedium{
    font-size: 100%;
    height: 100%;
    width: 100%;
}
.OrangeCup{
    font-size: 100%;
    height: 100%;
    width: 100%;
} */


